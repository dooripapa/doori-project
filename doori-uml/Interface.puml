@startuml
' - private, # protected, + public
'클래스 위 아래 간격을 고정
skinparam ranksep 100
'클래스 좌우 간격을 고정
skinparam nodesep 100
'화살표 방향이 수직 수평으로 표시됨
skinparam linetype ortho
'그래프로 표시되는 글자는 설치되어 있는 D2Coding 폰트로 지정함
skinparam defaultFontName D2Coding
'https://plantuml.com/class-diagram
set namespaceSeparator ::

class doori::Common::Log{
}
class doori::Common::Error{
+Error()
+Error(Error&& rhs)
+Error(const Error& rhs)
+Error& operator=(Error&& rhs)
+Error& operator=(const Error& rhs)
+void occur(int errnum, bool status, const std::string& cause)
+void occur(int errnum, bool status, char const(&value)[N])
+virtual ~Error()
+void Clear()
+bool Status()
+int Errno()
+const std::string& Cause()
#inline void InjectBySystemcall()
#inline void InjectByClient(const string& cause)
#void InjectByClient(char const(&value)[N])
-bool mStatus
-int mErrno
-string mCause
}

Interface Application{
#IInterface CreateInterface()
#IIPC CreateIPC()
#IDictionary CreateDictionary()
}

Interface IInterface{
#string GetHederPacket()
#string GetFooterPacket()
}

class Tnsd{
+CreateInterface()
}

class TnsdInterface{
}


enum TnsdTokenId{
+VERSION
+TNSD_IP
+TNSD_PORT
+BINDING_IP_FOR_TNSD
+BINDING_PORT_FOR_TNSD
+BINDING_IP_FOR_MULTISESSION
+BINDING_PORT_FOR_MULTISESSION
+LOG_NAME
+LOG_PATH
+LOG_LEVEL
+MY_TOPIC
+END
}

interface IDictionary{
#string GetId(Token id)
}

class TnsdDictionary{
}

enum doori::CommunicationMember::SOCK_STATUS {
+INIT
+BINDING
+LISTEN
+ACCEPT
+ESTABLISED
+CLOSED
}

enum doori::CommunicationMember::SOCK_OPT {
+REUSE
+KEEPALIVE
+LINGER
+RCVBUF
+SNDBUF
+RCVTIMEO
+SNDTIMEO
+BROADCAST
+OFF_NAGLE
}



class doori::CommunicationMember::Socket{
+Socket();
+Socket(int fd, SOCK_STATUS status);
+Socket& operator=(const Socket & rhs)
+Socket& operator=(Socket && rhs)
+Socket(const Socket & rhs)
+Socket(Socket && rhs)
+~Socket()
+bool IsBitwise(SOCK_STATUS status)
+void SetBitwise(SOCK_STATUS status)
+void SetBitwise(int fd, SOCK_STATUS status)
+int GetFd()
---
-int mFd
-int mStatus
}

class doori::CommunicationMember::TcpApi{
+void Socket();
+void SetReuseOpt();
+void SetTimeoutOpt();
+void Bind();
+void Listen();
+Socket Accept();
+void Connect();
+void Send();
+void Recv();
+void RequestConnection();
+void Reply();
-Socket mSocket
}

Error <|-- TcpApi : 상속
Socket *-- TcpApi

interface doori::CommunicationMember::IIPC{
+int Create(IIPCBuilder& builder)
+IIPCTopology* GetIPC()
}

class doori::CommunicationMember::TCP{
int Create(IIPCBuilder& builder) override
unique_ptr<IIPCTopology> GetIPC() noexcept override
..
-int mConnection
}


enum doori::CommunicationMember::TOPOLOGY_TYPE {
SERVER,
CLIENT
}

interface doori::CommunicationMember::IIPCBuilder{
int BindFrom()
int BindTo()
int GetListenRsc()
int EstablishTopologies()
}

class doori::CommunicationMember::TCPBuilder{
+int BindFrom() override;
+int BindTo() override;
+int EstablishTopologies() override;
+int GetListenRsc() override;
..
+TCPBuilder(TOPOLOGY_TYPE type, string ip, string port);
+TCPBuilder(string destination_ip, string destination_port, string source_ip, string source_port);
--
-string mDestIp;
-string mDestPort;
-string mSourceIp;
-string mSourcePort;
-int mListenFd;
-int mSourceFd;
-TOPOLOGY_TYPE mType;
-const int kBackLog=10;
}

interface doori::CommunicationMember::IIPCTopology{
int Send(const string &data)
int Recv(string &data, uint8_t tilSize)
int Reply()
int Close()
}

class doori::CommunicationMember::TCPTopology{
int Send(const string &data) override
int Recv(string &data, uint8_t tilSize) override
..
--
-int mDataPassage
}

class doori::CommunicationMember::Epoll{
}

class doori::CommunicationMember::EpollEvents{
}

EpollEvents <-- Epoll



IDictionary <|-- TnsdDictionary


Application <|-- Tnsd
IInterface <|-- TnsdInterface
IInterface <--o Application
TnsdInterface <--o Tnsd

IIPCBuilder <|-- TCPBuilder
IIPCTopology <|-- TCPTopology

IIPC <|-- TCP
IIPCBuilder <-o IIPC
TCPBuilder <- TCP : 의존 <
TCPTopology <.. TCP : 생성 <





@enduml

@startuml
' - private, # protected, + public
'클래스 위 아래 간격을 고정
skinparam ranksep 100
'클래스 좌우 간격을 고정
skinparam nodesep 100
'화살표 방향이 수직 수평으로 표시됨
skinparam linetype ortho
'그래프로 표시되는 글자는 설치되어 있는 D2Coding 폰트로 지정함
skinparam defaultFontName D2Coding
'https://plantuml.com/class-diagram
set namespaceSeparator ::

'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'''''''''''''''  Common  Library   ''''''''''''''''''''''''
'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
class doori::Common::Log{
}
class doori::Common::Error{
+Error()
+Error(Error&& rhs)
+Error(const Error& rhs)
+Error& operator=(Error&& rhs)
+Error& operator=(const Error& rhs)
+void occur(int errnum, bool status, const std::string& cause)
+void occur(int errnum, bool status, char const(&value)[N])
+virtual ~Error()
+void Clear()
+bool Status()
+int Errno()
+const std::string& Cause()
#inline void InjectBySystemcall()
#inline void InjectByClient(const string& cause)
#void InjectByClient(char const(&value)[N])
-bool mStatus
-int mErrno
-string mCause
}

'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'''''''''''''''  Enum              ''''''''''''''''''''''''
'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
enum TnsdTokenId{
+VERSION
+TNSD_IP
+TNSD_PORT
+BINDING_IP_FOR_TNSD
+BINDING_PORT_FOR_TNSD
+BINDING_IP_FOR_MULTISESSION
+BINDING_PORT_FOR_MULTISESSION
+LOG_NAME
+LOG_PATH
+LOG_LEVEL
+MY_TOPIC
+END
}

enum doori::CommunicationMember::SOCK_STATUS {
+INIT
+BINDING
+LISTEN
+ACCEPT
+ESTABLISED
+CLOSED
}

enum doori::CommunicationMember::SOCK_OPT {
+REUSE
+KEEPALIVE
+LINGER
+RCVBUF
+SNDBUF
+RCVTIMEO
+SNDTIMEO
+BROADCAST
+OFF_NAGLE
}

'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'''''''''''''''  Process           ''''''''''''''''''''''''
'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
Interface Application{
#IInterface CreateInterface()
#IIPC CreateIPC()
#IDictionary CreateDictionary()
}

Interface IInterface{
#string GetHederPacket()
#string GetFooterPacket()
}

class Tnsd{
+CreateInterface()
}

class TnsdInterface{
}



interface IDictionary{
#string GetId(Token id)
}

class TnsdDictionary{
}

IDictionary <|-- TnsdDictionary
Application <|-- Tnsd
IInterface <|-- TnsdInterface
IInterface <--o Application
TnsdInterface <--o Tnsd




'''''''''''''''''''''''''''''''''''''''''''''''''''''''
'''''''''   IPC Builder Pattern   '''''''''''''''''''''
'''''''''''''''''''''''''''''''''''''''''''''''''''''''
interface doori::CommunicationMember::IIPC{
void Create(IIPCBuilder& builder)
}

interface doori::CommunicationMember::IIPCBuilder{
unique_ptr<IIPCTopology> GetTopology()
int Establish()
}

class doori::CommunicationMember::TCP{
void Create(IIPCBuilder& builder) override
..
}

class doori::CommunicationMember::TCPBuilder{
+unique_ptr<IIPCTopology> GetTopology() override
+int Establish() override
..
+TCPBuilder() = delete
+TCPBuilder(Socket &socket);
+TCPBuilder(const TCPBuilder&) = delete
+TCPBuilder(TCPBuilder&&) = delete
+TCPBuilder& operator=(const TCPBuilder&) = delete
+TCPBuilder& operator=(TCPBuilder&&) = delete
+void From(string ip, string port)
+void To(string ip, string port)
--
-Socket& mSocket
-TcpApi mTcpApi;
-string mBindingIp
-string mBindingPort
-string mRemoteIp
-string mRemotePort
-bool mServer
-bool mClient
-int SetServer(Socket& server, string ip, string port, int backlogNum, int timeout);
-int BindingClient(Socket& client, string bindingIp, string bindingPort, string remoteIp, string remotePort, int timeout);
}

interface doori::CommunicationMember::IIPCTopology{
long Send(const string &data)
long Recv(string &data, uint8_t tilSize)
int Close()
}

class doori::CommunicationMember::Socket{
+Socket();
+Socket(int fd, SOCK_STATUS status);
+Socket& operator=(const Socket & rhs)
+Socket& operator=(Socket && rhs)
+Socket(const Socket & rhs)
+Socket(Socket && rhs)
+~Socket()
+bool IsBitwise(SOCK_STATUS status)
+void SetBitwise(SOCK_STATUS status)
+void SetBitwise(int fd, SOCK_STATUS status)
+int GetFd()
+long Send()
+long Recv()
+int Close()
---
-int mFd
-int mStatus
}

class doori::CommunicationMember::TcpApi{
+TcpApi(Socket& socket)
+void SetReuseOpt(string ip, string port);
+void SetReuseOpt(string port);
+void SetTimeoutOpt(std::uint8_t timeout);
+void Bind(string ip, string port);
+void Bind(string port);
+void Listen(int backlogNum);
+int Accept();
+void Connect(string ip, string port);
+void Connect(string ip, string port,std::uint8_t timeout);
+Socket & GetSocket() ;
---
-Socket& mSocket
}

struct doori::CommunicationMember::EpollData{
-int mFd;
-int (*mCallEpollApiProcess)( int fd, int(*userFunc)(Socket) );
}

class doori::CommunicationMember::EpollApi{
+explicit EpollApi(Socket& socket);
+void InitEpoll();
+void RunningForeground(int backlogEventNum, int timeout, int(*delegation)(Socket) );
---
-int AddFdInEpollList();
-static int CallEpollApiProcess( int fd, int(*userFunc)(Socket socket)  );
-int    mEpollRoot;
-Socket& mListenSocket;
}

enum doori::DataStream::ENCODE_TYPE{
ASCII
UTF_8
}

Interface doori::DataStream::IHeader{
virtual long TotalLength()
ENCODE_TYPE Encode()
}

Interface doori::DataStream::Body{
virtual string Data()
}

Interface doori::DataStream::IFooter{
virtual string Data()
}

Interface doori::DataStream::ITnsdStream{
+ITnsdStream(IHeader header, IBody body, IFooter footer)
-IHeader& mHeader
-IBody& mBody
-IFooter& mFooter
}


''''''''''''''''''''''''''''''''''''''''''''
'''' Tnsd
''''''''''''''''''''''''''''''''''''''''''''
class doori::Tnsd::MiddleSide{
+MiddleSide(string BindingIp, string BindingPort);
+void Alive()
+void Change()
}

class doori::Tnsd::PubSide{
+void PubSide(string tnsdIp, string tnsdPort, Topic topic)
+void Notify()
+void Publish(const IStream&)
+void Anwser()
-void Check(Hash)
-vector<Socket> mSubSessions
-EpollApi mTnsdSessions
}

class doori::Tnsd::SubSide{
+void SubSide(string tnsdIp, string tnsdPort, Topic topic)
+void Notify()
+void Connect(string PubSideIp, string PubSidePort)
+void Anwser()
-EpollApi mPubSessions
-EpollApi mTnsdSessions
}

class doori::Tnsd::Topic{
+bool set(initializer_list<string>)
+bool set(const string&)
+Topic& operator=(const Topic&)
+Topic& operator=(Topic&&)
+bool operator==(const Topic&)
+string getTopicName() const noexcept;
+string getTopicName(unsigned int depth) const noexcept;
+uint getDepthSize() const noexcept
}

''''''''''''''''''''''''''''''''''''''''''''
'''' Etc
''''''''''''''''''''''''''''''''''''''''''''
class doori::Etc::Bigdecimal{
}

class doori::Etc::Regex{
}

''''''''''''''''''''''''''''''''''''''''''''
'''' Process
''''''''''''''''''''''''''''''''''''''''''''
class doori::Process::Application{
+Application();
+virtual ~Application();
+virtual int operator()() noexcept
+virtual std::unique_ptr<Application> clone() const noexcept
+virtual string ProcessName() noexcept
+virtual bool  Daemonize() noexcept
+virtual string  LogFile() noexcept
+virtual Common::Log::LEVEL LogLevel() noexcept
+virtual int Terminate() noexcept
-std::string mDefaultLogPath{"/tmp/"};
-std::string mDefaultLogName{"a.out.log"};
}

class doori::Process::Getopt{
+Getopt() = delete;
+Getopt(const Getopt&) = default;
+Getopt(Getopt&&) = delete;
+Getopt(int argc, char **argv);
+bool getOptValue(std::string opt, std::string &value)
+string getOptValue(std::string opt) noexcept
+string Process() const noexcept
+Getopt& operator=(const Getopt& rhs) noexcept
-string getValue(string opt) noexcept
-int  mArgc;
-char **mArgv;
-string mAllCommandLIne;
}

class doori::Process::Runner{
+Runner();
+~Runner();
+Runner(const Runner& rhs);
+explicit Runner(Application&& app );
+void run() -> void;
-int doAsBackground() noexcept -> int;
-int doAsForeground() noexcept -> int;
-void displayLogInfo() noexcept -> void;
-void doRelease() -> void;
-std::unique_ptr< Application > mApp;
}

'''''''''''''''''''''''''''''''''''''''''''''''''''''
'' 관계표현
'''''''''''''''''''''''''''''''''''''''''''''''''''''

Error <|-- EpollApi : 상속
Socket o-- EpollApi : 참조
EpollData -- EpollApi : 종속

Error <|-- TcpApi : 상속
Socket o-- TcpApi : 참조

Socket -- SOCK_STATUS
Socket -- SOCK_OPT

IIPCBuilder <|-- TCPBuilder
IIPCTopology <|-- Socket

IIPC <|-- TCP
IIPCBuilder <-o IIPC
TCPBuilder <-o TCP : 의존 <
Socket <.. TCP : 생성 <

doori::Process::Application o-- doori::Process::Runner: 참조

Error <|-- MiddleSide: 상속
Error <|-- PubSide: 상속
Error <|-- SubSide: 상속

@enduml

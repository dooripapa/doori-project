@startuml
' - private, # protected, + public
'클래스 위 아래 간격을 고정
skinparam ranksep 100
'클래스 좌우 간격을 고정
skinparam nodesep 100
'화살표 방향이 수직 수평으로 표시됨
skinparam linetype ortho
'그래프로 표시되는 글자는 설치되어 있는 D2Coding 폰트로 지정함
skinparam defaultFontName D2Coding
'https://plantuml.com/class-diagram
set namespaceSeparator ::

'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'''''''''''''''  Common  Library   ''''''''''''''''''''''''
'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
class Common::Log{
}
class Common::Error{
+Error()
+Error(Error&& rhs)
+Error(const Error& rhs)
+Error& operator=(Error&& rhs)
+Error& operator=(const Error& rhs)
+void occur(int errnum, bool status, const std::string& cause)
+void occur(int errnum, bool status, char const(&value)[N])
+virtual ~Error()
+void Clear()
+bool Status()
+int Errno()
+const std::string& Cause()
#inline void InjectBySystemcall()
#inline void InjectByClient(const string& cause)
#void InjectByClient(char const(&value)[N])
-bool mStatus
-int mErrno
-string mCause
}

'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'''''''''''''''  Enum              ''''''''''''''''''''''''
'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
enum TnsdTokenId{
+VERSION
+TNSD_IP
+TNSD_PORT
+BINDING_IP_FOR_TNSD
+BINDING_PORT_FOR_TNSD
+BINDING_IP_FOR_MULTISESSION
+BINDING_PORT_FOR_MULTISESSION
+LOG_NAME
+LOG_PATH
+LOG_LEVEL
+MY_TOPIC
+END
}

enum CommunicationMember::SOCK_STATUS {
+INIT
+BINDING
+LISTEN
+ACCEPT
+ESTABLISED
+CLOSED
}

enum CommunicationMember::SOCK_OPT {
+REUSE
+KEEPALIVE
+LINGER
+RCVBUF
+SNDBUF
+RCVTIMEO
+SNDTIMEO
+BROADCAST
+OFF_NAGLE
}

'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'''''''''''''''  Process           ''''''''''''''''''''''''
'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
Interface Process::Application{
#IInterface CreateInterface()
#IIPC CreateIPC()
#IDictionary CreateDictionary()
}

Interface Process::IInterface{
#string GetHederPacket()
#string GetFooterPacket()
}

class Process::Tnsd{
+CreateInterface()
}

class Process::TnsdInterface{
}



interface Process::IDictionary{
#string GetId(Token id)
}

class Process::TnsdDictionary{
}

IDictionary <|-- TnsdDictionary
Application <|-- Tnsd
IInterface <|-- TnsdInterface
IInterface <--o Application
TnsdInterface <--o Tnsd



'''''''''''''''''''''''''''''''''''''''''''''''''''''''
'''''''''   IPC Builder Pattern   '''''''''''''''''''''
'''''''''''''''''''''''''''''''''''''''''''''''''''''''
interface CommunicationMember::IIPC{
void Create(IIPCBuilder& builder)
}

interface CommunicationMember::IIPCBuilder{
unique_ptr<IIPCTopology> GetTopology()
int Establish()
}

class CommunicationMember::TCP{
void Create(IIPCBuilder& builder) override
..
}

class CommunicationMember::TCPBuilder{
+unique_ptr<IIPCTopology> GetTopology() override
+int Establish() override
..
+TCPBuilder() = delete
+TCPBuilder(Socket &socket);
+TCPBuilder(const TCPBuilder&) = delete
+TCPBuilder(TCPBuilder&&) = delete
+TCPBuilder& operator=(const TCPBuilder&) = delete
+TCPBuilder& operator=(TCPBuilder&&) = delete
+void From(string ip, string port)
+void To(string ip, string port)
--
-Socket& mSocket
-TcpApi mTcpApi;
-string mBindingIp
-string mBindingPort
-string mRemoteIp
-string mRemotePort
-bool mServer
-bool mClient
-int SetServer(Socket& server, string ip, string port, int backlogNum, int timeout);
-int BindingClient(Socket& client, string bindingIp, string bindingPort, string remoteIp, string remotePort, int timeout);
}

interface CommunicationMember::IIPCTopology{
long Send(const string &data)
long Recv(string &data, uint8_t tilSize)
int Close()
}

class CommunicationMember::Socket{
+Socket();
+Socket(int fd, SOCK_STATUS status);
+Socket& operator=(const Socket & rhs)
+Socket& operator=(Socket && rhs)
+Socket(const Socket & rhs)
+Socket(Socket && rhs)
+~Socket()
+bool IsBitwise(SOCK_STATUS status)
+void SetBitwise(SOCK_STATUS status)
+void SetBitwise(int fd, SOCK_STATUS status)
+int GetFd()
+long Send()
+long Recv()
+int Close()
---
-int mFd
-int mStatus
}

class CommunicationMember::TcpApi{
+TcpApi(Socket& socket)
+void SetReuseOpt(string ip, string port);
+void SetReuseOpt(string port);
+void SetTimeoutOpt(std::uint8_t timeout);
+void Bind(string ip, string port);
+void Bind(string port);
+void Listen(int backlogNum);
+int Accept();
+void Connect(string ip, string port);
+void Connect(string ip, string port,std::uint8_t timeout);
+Socket & GetSocket() ;
---
-Socket& mSocket
}

struct CommunicationMember::EpollData{
-int mFd;
-int (*mCallEpollApiProcess)( int fd, int(*userFunc)(Socket) );
}

class CommunicationMember::EpollApi{
+explicit EpollApi(Socket& socket);
+void InitEpoll();
+void RunningForeground(int backlogEventNum, int timeout, int(*delegation)(Socket) );
---
-int AddFdInEpollList();
-static int CallEpollApiProcess( int fd, int(*userFunc)(Socket socket)  );
-int    mEpollRoot;
-Socket& mListenSocket;
}

'''''''''''''''''''''''''''''''''''''''''''''''''''''''
'''''''''   Stream                '''''''''''''''''''''
'''''''''''''''''''''''''''''''''''''''''''''''''''''''
enum Stream::CODER{
ASCII
UTF8
UTF16
}

enum Stream::ENDIAN{
BIG
LITTLE
}

enum Stream::DATA_FORMAT{
SOLID
JSON
XML
CSV
}

Interface Stream::IStream{
virtual long GetLength()
virtual vector<char> ToStream()
}

Interface Stream::IHeader{
}

Interface Stream::IBody{
}

class Stream::Protocol {
+Protocol()
+Protocol(const Protocol& rhs)
+Protocol& operator=(const Protocol& rhs)
-char mCoder[K_CODER_LEN]
-char mEndian[K_ENDIAN_LEN]
-char mDataFormat[K_DATAFORMAT_LEN]
}

Interface Stream::StreamTemplate{
+StreamTemplate(CODER coder, ENDIAN endian, DATA_FORMAT dataFormat, Header& h, Body& b)
+vector<char> ToStream()
---
-constexpr static int K_CODER_LEN = 8
-constexpr static int K_ENDIAN_LEN = 8
-constexpr static int K_DATAFORMAT_LEN = 8
-string convertCoder()
-string convertEndian()
-string convertDataFormat()
-CODER mCoder
-ENDIAN mEndian
-DATA_FORMAT mDataFormat
-Protocol mStreamProtocol
-Header& mHeader
-Body& mBody
}

'''''''''''''''''''''''''''''''''''''''''''''''''''''''
'''''''''   DataStructure  '''''''''''''''''''''
'''''''''''''''''''''''''''''''''''''''''''''''''''''''
enum DataStructure::INSERT{
FORCE, CHECK
}

class DataStructure::Tree{
+Tree()
+Tree(const Tree& rhs)
+Tree(Tree&& rhs)
+auto attachBranch(const ILeafKey &dataKey, const Branch<T>& branch, INSERT) noexcept -> bool
+auto removeBranch(const ILeafKey &dataKey) noexcept -> bool
+auto getBranch(const ILeafKey &dataKey) -> Branch<T>&
+auto attachLeaf(const ILeafKey &dataKey, T leaf) -> bool
+auto operator=(const Tree& rhs) noexcept -> Tree<T>&
+auto operator=(Tree<T>&& rhs) noexcept -> Tree<T>&
+auto RootBranches() noexcept -> std::vector< Branch<T> >&
-auto findRootBranches(const string& topic_name_segment, typename vector<Branch<T>>::iterator& itPos) -> bool
-auto findRootBranches(const string& topic_name_segment) -> bool
-auto copyFrom(Tree&& rhs) -> void
-auto copyFrom(const Tree& rhs) -> void
-vector< Branch<T> >   mRootBranches
}

class DataStructure::Branch{
+Branch();
+Branch(const Branch&) noexcept ;
+Branch(Branch&&) noexcept ;
+Branch(const std::string& branchName) noexcept ;
+constexpr auto FindLinkBranches(const std::string& branchName, typename vector<Branch<T>>::iterator& branch) noexcept -> bool;
+constexpr auto FindLinkBranches(const std::string& branchName) noexcept -> bool;
+constexpr auto SetName(const std::string& name) noexcept -> void;
+auto GetName() const noexcept -> const std::string&;
+constexpr auto Link(const Branch& branch) noexcept -> bool;
+constexpr auto Link(Branch&&) noexcept -> bool;
+constexpr auto GetLeaves() noexcept -> const std::vector<T>&;
+constexpr auto IsThereLeaf(const T&) noexcept -> bool;
+constexpr auto DropLeaf(const T&) noexcept -> bool;
+constexpr auto AttachLeaf(const T&) noexcept -> void;
+constexpr auto AttachLeaf(T&&) noexcept -> void;
+constexpr auto operator=(const Branch& rhs) noexcept -> Branch&;
+constexpr auto operator=(Branch&& rhs) noexcept -> Branch&;
+constexpr auto operator==(const Branch& rhs) const noexcept -> bool;
-auto copyFrom(const Branch& rhs) noexcept -> void;
-auto copyFrom(Branch&& rhs) noexcept -> void;
-string mName;
-vector<Branch<T>> mLinkBranches;
-vector<T> mLeaves;
}

interface DataStructure::ILeafKey{
virtual string GetKey() const noexcept = 0;
virtual string GetDepthKey(unsigned int depth) const noexcept = 0;
virtual uint GetDepth() const noexcept = 0;
}


''''''''''''''''''''''''''''''''''''''''''''
'''' Tnsd
''''''''''''''''''''''''''''''''''''''''''''
enum Tnsd::PROTOCOL{
INTERNAL_ERROR
NOTIFY
ANWSER
CHANGE
ALIVE
CLOSE
PUBLISH
REPORT
}

class Tnsd::NodeInfo{
}

class Tnsd::Header{
+long GetLength() const override
+vector<char> ToStream() override
---
+void SetProtocol(PROTOCOL protocol)
-PROTOCOL mTnsdProtocol
-string switchProtocolName(PROTOCOL protocol) const
-PROTOCOL switchProtocolEnum(string protocol) const
}

class Tnsd::Body{
+long GetLength() const override
+vector<char> ToStream() override
---
+void InternalError(string error)
+void Notify(const NodeInfo& myNodeInfo)
+void Anwser(string hash16)
+void Anwser(vector<NodeInfo> publisherList)
+void Change(NodeInfo publisher)
+void Close(NodeInfo myNodeInfo)
+void Publish(Data::Json json)
+void Alive(string hash16)
+void Report(Data::Json json)
-Data::Json mJson
}

class Tnsd::SubSide{
+void SubSide(string tnsdIp, string tnsdPort, Topic topic)
+void Notify()
+void Connect(string PubSideIp, string PubSidePort)
+void Anwser()
-EpollApi mPubSessions
-EpollApi mTnsdSessions
}

class Tnsd::Topic{
+bool set(initializer_list<string>)
+bool set(const string&)
+Topic& operator=(const Topic&)
+Topic& operator=(Topic&&)
+bool operator==(const Topic&)
+string getTopicName() const noexcept;
+string getTopicName(unsigned int depth) const noexcept;
+uint getDepthSize() const noexcept
}

''''''''''''''''''''''''''''''''''''''''''''
'''' Etc
''''''''''''''''''''''''''''''''''''''''''''
class Etc::Bigdecimal{
}

class Etc::Regex{
}

''''''''''''''''''''''''''''''''''''''''''''
'''' Process
''''''''''''''''''''''''''''''''''''''''''''
class Process::Application{
+Application();
+virtual ~Application();
+virtual int operator()() noexcept
+virtual std::unique_ptr<Application> clone() const noexcept
+virtual string ProcessName() noexcept
+virtual bool  Daemonize() noexcept
+virtual string  LogFile() noexcept
+virtual Common::Log::LEVEL LogLevel() noexcept
+virtual int Terminate() noexcept
-std::string mDefaultLogPath{"/tmp/"};
-std::string mDefaultLogName{"a.out.log"};
}

class Process::Getopt{
+Getopt() = delete;
+Getopt(const Getopt&) = default;
+Getopt(Getopt&&) = delete;
+Getopt(int argc, char **argv);
+bool getOptValue(std::string opt, std::string &value)
+string getOptValue(std::string opt) noexcept
+string Process() const noexcept
+Getopt& operator=(const Getopt& rhs) noexcept
-string getValue(string opt) noexcept
-int  mArgc;
-char **mArgv;
-string mAllCommandLIne;
}

class Process::Runner{
+Runner();
+~Runner();
+Runner(const Runner& rhs);
+explicit Runner(Application&& app );
+void run() -> void;
-int doAsBackground() noexcept -> int;
-int doAsForeground() noexcept -> int;
-void displayLogInfo() noexcept -> void;
-void doRelease() -> void;
-std::unique_ptr< Application > mApp;
}

'''''''''''''''''''''''''''''''''''''''''''''''''''''
'' 관계표현
'''''''''''''''''''''''''''''''''''''''''''''''''''''

Error <|-- EpollApi : 상속
Socket --o EpollApi : 참조
EpollData -- EpollApi : 종속

Error <|-- TcpApi : 상속
Socket o-- TcpApi : 참조

Socket -- SOCK_STATUS
Socket -- SOCK_OPT

IIPCBuilder <|-- TCPBuilder
IIPCTopology <|-- Socket

IIPC <|-- TCP
IIPCBuilder <-o IIPC
TCPBuilder <-o TCP : 의존 <
Socket <.. TCP : 생성 <

Process::Application o-- Process::Runner: 참조

Stream::IStream <|-- Stream::IHeader: 상속
Stream::IStream <|-- Stream::IBody: 상속

Stream::IHeader --o Stream::StreamTemplate: 참조
Stream::IBody --o Stream::StreamTemplate: 참조

Stream::CODER --* Stream::StreamTemplate
Stream::ENDIAN --* Stream::StreamTemplate
Stream::DATA_FORMAT --* Stream::StreamTemplate
Stream::Protocol --* Stream::StreamTemplate

Stream::IHeader <|-- Tnsd::Header : 구현/실체화
Stream::IBody <|-- Tnsd::Body : 구현/실체화

Tnsd::PROTOCOL --* Tnsd::Header
Data::Json --* Tnsd::Body
Tnsd::NodeInfo -- Tnsd::Body

DataStructure::ILeafKey <|-- Tnsd::Topic :구현/실체화

DataStructure::Branch <-- DataStructure::Branch : 재귀호출
DataStructure::Branch --* DataStructure::Tree
DataStructure::ILeafKey -- DataStructure::Tree : 사용

@enduml
